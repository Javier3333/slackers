[
    {
        "type": "message",
        "user": "U02618EV1",
        "text": "<@U02F8LF2X> ----^",
        "ts": "1416323463.000003"
    },
    {
        "type": "message",
        "user": "U02F8TTPU",
        "text": "<http:\/\/lav.io\/2014\/11\/stupid-projects-from-the-stupid-hackathon\/>",
        "attachments": [
            {
                "service_name": "Sam Lavigne",
                "title": "Stupid Projects From The Stupid Hackathon",
                "title_link": "http:\/\/lav.io\/2014\/11\/stupid-projects-from-the-stupid-hackathon\/",
                "text": "This weekend, Amelia Winger-Bearskin and I organized our second Stupid Shit No One Needs & Terrible Ideas Hackathon, a hackathon that asks participants to produce project that have no value wha...",
                "fallback": "Sam Lavigne: Stupid Projects From The Stupid Hackathon",
                "thumb_url": "http:\/\/lav.io\/wp-content\/uploads\/2014\/11\/face-1024x1024.jpg?w=240",
                "ts": 1416267106,
                "from_url": "http:\/\/lav.io\/2014\/11\/stupid-projects-from-the-stupid-hackathon\/",
                "thumb_width": 1024,
                "thumb_height": 1024,
                "id": 1
            }
        ],
        "ts": "1416338795.000002"
    },
    {
        "type": "message",
        "user": "U02HAJ6JF",
        "text": "<http:\/\/forum.espruino.com\/conversations\/257732\/>",
        "attachments": [
            {
                "text": "Hi - this is something I showed off at FullStack and EclipseCon, but sadly the videos aren&#39;t online yet, so I did some more :) Background What if you want to control some hardware from a computer, phone or tablet? That&#39;s almost certainly going to involve developing an application per platform right now - and that&#39;s a lot of platforms: iOS, Android, Mac, Windows, Linux, Chromebook, and so on... What if you could just use webpage instead? Web pages are much easier to make, and they run on almost everything... Well, how could you communicate from a website? The obvious answer is via the internet, but WiFi on a microcontroller draws quite a lot of power, and is often quite expensive... But if not that, what else? Not all devices have Bluetooth (and it can&#39;t be accessed from a website anyway), and while most devices have USB they all have different type sockets. In fact the one socket that pretty much every computer has is a headphone jack - and it&#39;s easily accessible from a website without the need for drivers or special permissions. What&#39;s it like: <http:\/\/youtube.com\/watch?v=BQDZNFXy­grM|youtube.com\/watch?v=BQDZNFXy­grM> <http:\/\/youtube.com\/watch?v=IP7e5KJG­VnM|youtube.com\/watch?v=IP7e5KJG­VnM> Note that there was no extra software on the Espruino Boards. The data coming out of the cable is interpreted directly by the USART as JavaScript code which is then executed. Those videos show transmitting, but receive works too - to the point where there&#39;s a full terminal window just like the left-hand side of the Web IDE: <http:\/\/youtube.com\/watch?v=3gWgrlbi­tiY|youtube.com\/watch?v=3gWgrlbi­tiY> There&#39;s also integration with Eclipse Orion. See here for more details. How? It turns out it&#39;s relatively easy. To get a &#39;1&#39; on one of Espruino&#39;s inputs, you need at least 1.546v, and to get a &#39;0&#39;, you need below 1.166v. You just need to shift the &#39;resting&#39; voltage level coming out of the headphone jack to something that just about reads as a &#39;1&#39; (so more than 1.546v). This is done with nothing more than a capacitor and two resistors (one of which is built in to Espruino) - see the diagram at the bottom of this post. As the headphone jack can output -1v to +1v (and all you need is 0.4v), you&#39;ve got plenty of voltage swing available to make reliable communications. It&#39;s then just a matter of creating the right waveform. As above, you can do similar things for receiving data too - everything you need is here: <http:\/\/github.com\/espruino\/EspruinoOrio­n|github.com\/espruino\/EspruinoOrio­n> How&#39;s it used? To get one-way comms, just include the file: <script src=&#34;https:\/\/espruino.github.io\/Espruino­Orion\/serial_to_audio.js&#34;><\/script> And then to send and execute code, do something like the following: audio_serial_write(&#34;digitalWrite(LED1,1)­;\\n&#34;); Two directional communications is harder as the code for it is part of and depends on the EspruinoTools library on GitHub - so would be a little harder to extract and use on its own. What&#39;s it useful for? There are so many uses for this, for instance: Teachers can use low-cost Android tablets to teach programming and robotics - there&#39;s no software to install, no wireless pairing and no fragile connector - just sturdy a headphone jack. Maybe you want to read data back from a data logger at a remote location? It&#39;s easy to make a headphone plug waterproof too. Maybe you want a web-controlled hexapod that walks around holding your phone? Who doesn&#39;t? This would be perfect for that. You&#39;ve might have made something and you just want a nice easy touchscreen UI to set it up - but don&#39;t want all that extra mass and cost connected to it all the time. Will it work on non-Espruino devices? Maybe, but not without having to write more software to run on the device you&#39;re connecting to. With Espruino you can just get it out of the packet, add the 2 components and headphone wires, and you&#39;re sorted! If you&#39;ve come to this site through a referral, please check out the KickStarter that I&#39;m currently running for the tiny board that you see in the videos.",
                "fallback": "Hi - this is something I showed off at FullStack and EclipseCon, but sadly the videos aren&amp;#39;t online yet, so I did some more :) Background What if you want to control some hardware from a computer, phone or tablet? That&amp;#39;s almost certainly going to involve developing an application per platform right now - and that&amp;#39;s a lot of platforms: iOS, Android, Mac, Windows, Linux, Chromebook, and so on... What if you could just use webpage instead? Web pages are much easier to make, and they run on almost everything... Well, how could you communicate from a website? The obvious answer is via the internet, but WiFi on a microcontroller draws quite a lot of power, and is often quite expensive... But if not that, what else? Not all devices have Bluetooth (and it can&amp;#39;t be accessed from a website anyway), and while most devices have USB they all have different type sockets. In fact the one socket that pretty much every computer has is a headphone jack - and it&amp;#39;s easily accessible from a website without the need for drivers or special permissions. What&amp;#39;s it like: <http:\/\/youtube.com\/watch?v=BQDZNFXy­grM|youtube.com\/watch?v=BQDZNFXy­grM> <http:\/\/youtube.com\/watch?v=IP7e5KJG­VnM|youtube.com\/watch?v=IP7e5KJG­VnM> Note that there was no extra software on the Espruino Boards. The data coming out of the cable is interpreted directly by the USART as JavaScript code which is then executed. Those videos show transmitting, but receive works too - to the point where there&amp;#39;s a full terminal window just like the left-hand side of the Web IDE: <http:\/\/youtube.com\/watch?v=3gWgrlbi­tiY|youtube.com\/watch?v=3gWgrlbi­tiY> There&amp;#39;s also integration with Eclipse Orion. See here for more details. How? It turns out it&amp;#39;s relatively easy. To get a &amp;#39;1&amp;#39; on one of Espruino&amp;#39;s inputs, you need at least 1.546v, and to get a &amp;#39;0&amp;#39;, you need below 1.166v. You just need to shift the &amp;#39;resting&amp;#39; voltage level coming out of the headphone jack to something that just about reads as a &amp;#39;1&amp;#39; (so more than 1.546v). This is done with nothing more than a capacitor and two resistors (one of which is built in to Espruino) - see the diagram at the bottom of this post. As the headphone jack can output -1v to +1v (and all you need is 0.4v), you&amp;#39;ve got plenty of voltage swing available to make reliable communications. It&amp;#39;s then just a matter of creating the right waveform. As above, you can do similar things for receiving data too - everything you need is here: <http:\/\/github.com\/espruino\/EspruinoOrio­n|github.com\/espruino\/EspruinoOrio­n> How&amp;#39;s it used? To get one-way comms, just include the file: &lt;script src=&amp;#34;https:\/\/espruino.github.io\/Espruino­Orion\/serial_to_audio.js&amp;#34;&gt;&lt;\/script&gt; And then to send and execute code, do something like the following: audio_serial_write(&amp;#34;digitalWrite(LED1,1)­;\\n&amp;#34;); Two directional communications is harder as the code for it is part of and depends on the EspruinoTools library on GitHub - so would be a little harder to extract and use on its own. What&amp;#39;s it useful for? There are so many uses for this, for instance: Teachers can use low-cost Android tablets to teach programming and robotics - there&amp;#39;s no software to install, no wireless pairing and no fragile connector - just sturdy a headphone jack. Maybe you want to read data back from a data logger at a remote location? It&amp;#39;s easy to make a headphone plug waterproof too. Maybe you want a web-controlled hexapod that walks around holding your phone? Who doesn&amp;#39;t? This would be perfect for that. You&amp;#39;ve might have made something and you just want a nice easy touchscreen UI to set it up - but don&amp;#39;t want all that extra mass and cost connected to it all the time. Will it work on non-Espruino devices? Maybe, but not without having to write more software to run on the device you&amp;#39;re connecting to. With Espruino you can just get it out of the packet, add the 2 components and headphone wires, and you&amp;#39;re sorted! If you&amp;#39;ve come to this site through a referral, please check out the KickStarter that I&amp;#39;m currently running for the tiny board that you see in the videos.",
                "from_url": "http:\/\/forum.espruino.com\/conversations\/257732\/",
                "id": 1
            }
        ],
        "ts": "1416352970.000005"
    },
    {
        "type": "message",
        "user": "U0289USNA",
        "text": "^--- cool",
        "ts": "1416354588.000008"
    }
]